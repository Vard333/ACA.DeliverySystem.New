@page "/item"
@using ACA.DeliverySystem.UI.Models
@using ACA.DeliverySystem.UI.Services
@inject NavigationManager NavigationManager
@inject ItemService ItemService
@inject ISnackbar Snackbar
@inject AuthService AuthService

<PageTitle>Items</PageTitle>

@* <style>
    body {
        background-image: url('https://static.vecteezy.com/system/resources/previews/018/998/198/original/online-delivery-service-concept-perfect-for-landing-page-delivery-website-banner-and-background-free-vector.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center center;
    }
</style>
 *@
<MudContainer>
    <MudGrid>
        @if (items == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            @foreach (var item in items)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard>
                        <MudCardMedia Image="@item.ImageUrl" Alt="Item Image" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@item.Name</MudText>
                                <MudText Typo="Typo.subtitle1">@item.Price.ToString("C")</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton OnClick="() => OrderItem(item)" Color="Color.Success">Order Now</MudButton>
                                <MudButton OnClick="() => GoToItemDetail(item.Id)" Color="Color.Secondary">See More</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
            }
        }
    </MudGrid>
</MudContainer>


@code {
    private IEnumerable<ItemViewModel> items;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            items = await ItemService.GetAll();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading items: {ex.Message}", Severity.Error);
        }
    }

    private void GoToItemDetail(int itemId)
    {
        NavigationManager.NavigateTo($"/item/{itemId}");
    }

    private async Task OrderItem(ItemViewModel item)
    {
        var userId = await AuthService.GetUserIdAsync();
        NavigationManager.NavigateTo($"User/{userId}/orders");
    }
}
